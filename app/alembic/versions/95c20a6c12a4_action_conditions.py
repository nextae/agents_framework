"""Action conditions

Revision ID: 95c20a6c12a4
Revises: d52284b3f2f8
Create Date: 2025-01-06 11:29:10.137935

"""

from collections.abc import Sequence

import sqlalchemy as sa
import sqlmodel
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "95c20a6c12a4"
down_revision: str | None = "d52284b3f2f8"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "actionconditionoperator",
        sa.Column(
            "logical_operator",
            sa.Enum("AND", "OR", name="logicaloperator", native_enum=False),
            nullable=False,
        ),
        sa.Column("action_id", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("parent_id", sa.Integer(), nullable=True),
        sa.Column("root_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["action_id"],
            ["action.id"],
            name="fk_actionconditionoperator_action_id",
        ),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["actionconditionoperator.id"],
            name="fk_actionconditionoperator_parent_id",
        ),
        sa.ForeignKeyConstraint(
            ["root_id"],
            ["actionconditionoperator.id"],
            name="fk_actionconditionoperator_root_id",
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.drop_table("actionconditionmatch")
    op.add_column(
        "actioncondition", sa.Column("parent_id", sa.Integer(), nullable=False)
    )
    op.add_column("actioncondition", sa.Column("root_id", sa.Integer(), nullable=False))
    op.add_column(
        "actioncondition",
        sa.Column(
            "state_variable_name",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=False,
        ),
    )
    op.add_column(
        "actioncondition",
        sa.Column(
            "comparison",
            sa.Enum(
                "EQUAL",
                "NOT_EQUAL",
                "GREATER",
                "LESS",
                "AT_LEAST",
                "AT_MOST",
                name="comparisonmethod",
                native_enum=False,
            ),
            nullable=False,
        ),
    )
    op.add_column(
        "actioncondition",
        sa.Column(
            "expected_value",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=False,
        ),
    )
    op.create_foreign_key(
        "fk_actioncondition_action_id",
        "actioncondition",
        "actionconditionoperator",
        ["parent_id"],
        ["id"],
    )
    op.create_foreign_key(
        "fk_actioncondition_root_id",
        "actioncondition",
        "actionconditionoperator",
        ["root_id"],
        ["id"],
    )
    op.drop_column("actioncondition", "is_active")
    op.drop_column("actioncondition", "description")
    op.drop_column("actioncondition", "value")
    op.drop_column("actioncondition", "name")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "actioncondition",
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "actioncondition",
        sa.Column("value", sa.VARCHAR(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "actioncondition",
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "actioncondition",
        sa.Column("is_active", sa.BOOLEAN(), autoincrement=False, nullable=False),
    )
    op.drop_constraint(
        "fk_actioncondition_action_id", "actioncondition", type_="foreignkey"
    )
    op.drop_constraint(
        "fk_actioncondition_root_id", "actioncondition", type_="foreignkey"
    )
    op.drop_column("actioncondition", "expected_value")
    op.drop_column("actioncondition", "comparison")
    op.drop_column("actioncondition", "state_variable_name")
    op.drop_column("actioncondition", "root_id")
    op.drop_column("actioncondition", "parent_id")
    op.create_table(
        "actionconditionmatch",
        sa.Column("action_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("condition_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["action_id"],
            ["action.id"],
            name="actionconditionmatch_action_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["condition_id"],
            ["actioncondition.id"],
            name="actionconditionmatch_condition_id_fkey",
        ),
        sa.PrimaryKeyConstraint(
            "action_id", "condition_id", name="actionconditionmatch_pkey"
        ),
    )
    op.drop_table("actionconditionoperator")
    # ### end Alembic commands ###
